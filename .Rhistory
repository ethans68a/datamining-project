??as.character.person
??as.character
?as.character
character(x)
character(1)
character("1")
?character
as.character(1)
as.character(list("1"))
as.character(list("1",2,3))
as.character
lm
lm.fit()
lm.fit
lm.fit()
?input
??input
library(nutshell)
download.file("https://cran.r-project.org/src/contrib/Archive/nutshell.audioscrobbler/nutshell.audioscrobbler_1.0.tar.gz", "nutshell.audioscrobbler_1.0.tar.gz")
download.file("https://cran.r-project.org/src/contrib/Archive/nutshell.bbdb/nutshell.bbdb_1.0.tar.gz", "nutshell.bbdb_1.0.tar.gz")
download.file("https://cran.r-project.org/src/contrib/Archive/nutshell/nutshell_2.0.tar.gz", "nutshell_2.0.tar.gz")
install.packages("nutshell.audioscrobbler_1.0.tar.gz", repos = NULL)
install.packages("nutshell.bbdb_1.0.tar.gz", repos = NULL)
install.packages("nutshell_2.0.tar.gz", repos = NULL)
library(nutshell)
data(births2006.smpl)
library(lattice)
?data
dt <- data(births2006.smpl)
dt <- births2006.smpl
help("VADeaths")
?which
count <- c()
for (i in 1:7){
count[i] <- length(which(dt$DOB_WK==category[i]))
}
category <- levels(factor(dt$DOB_WK))
count <- c()
for (i in 1:7){
count[i] <- length(which(dt$DOB_WK==category[i]))
}
?factor
factor((dt$DOB_WKB))
factor((dt$DOB_WK))
View(factor((dt$DOB_WK)))
?which
which(LETTERS = "R")
which(LETTERS == "R")
?levels
levels(factor(dt$DOB_WK))
(factor(dt$DOB_WK))
dow <- table(dt$DOB_WK)
View(dow)
dow <- table(dt$DOB_WK) # table, with frequency automatically made
barchart(dow,ylab="day of week",col="black")
# separate dataset corresponding to one categorical variable
dow_dm <- table(WK=dt$DOB_WK,MM=dt$DMETH_REC)
View(dow_dm)
dow_dm
dow_dm <- dow_dm[,-2] #forgot this syntax for subset
dow_dm
barchart(dow_dm,ylab="Day of week")
?col
col(1,2)
?barchart
barchart(dow_dm,ylab="Day of week",col(1,2))
barchart(dow_dm,ylab="Day of week",col=c(1,2))
barchart(dow_dm[,-2],ylab="Day of week",col=c(1,2))
barchart(dow_dm,ylab="Day of week",col=c(1,2))
# separate dataset corresponding to one categorical variable
dow_dm <- table(WK=dt$DOB_WK,MM=dt$DMETH_REC)
dow_dm <- dow_dm[,-2] # forgot this syntax for subset
barchart(dow_dm,ylab="Day of week",col=c(1,2))
dow_dm
barchart(dow_dm,ylab="day of week")
barchart(dow_dm[,-2],ylab="Day of week",col=c(1,2))
dow_dm <- dow_dm[,-2] # forgot this syntax for subset
barchart(dow_dm,ylab="Day of week",col=c(1,2))
barchart(dow_dm,ylab="Day of week",col=c(1,2))
barchart(dow_dm[,-2],ylab="day of week")
# separate dataset corresponding to one categorical variable
dow_dm <- table(WK=dt$DOB_WK,MM=dt$DMETH_REC)
barchart(dow_dm,ylab="Day of week",col=c(1,2))
barchart(dow_dm[,-2],ylab="day of week")
dow <- table(dt$DOB_WK) # table, with frequency automatically calculated
barchart(dow,ylab="day of week",col="black")
# separate dataset corresponding to one categorical variable
dow_dm <- table(WK=dt$DOB_WK,MM=dt$DMETH_REC)
# forgot the syntax meaning for subset
dow_dm
barchart(dow_dm,ylab="Day of week",col=c(1,2))
barchart(dow_dm[,-2],ylab="Day of week",col=c(1,2))
barchart(dow_dm,ylab="day of week")
# histogram from lattice package
histogram(dt$DBWT,col="blue",type="density")
# hist from R base
hist(dt$DBWT,col="black", main="histogram birth weight of baby",xlab="DBWT")
# birthday weight
histogram(~DBWT|DPLURAL)
~DBWT
~DBWT
e
# birthday weight. column ,followed by the data, 1 column 5 rows.
histogram(~DBWT|DPLURAL,data=dt,layout=c(1,5),col="black")
# birthday weight. column ,followed by the data, 1 column 5 rows.
histogram(~DBWT|DPLURAL,data=dt,layout=c(1,5),col="black",type="count") # same plot as ch.2 in book
?levls
?levels
dt$DBWT|DMETH_REC
histogram(~DBWT|DMETHREC,data=dt)
histogram(~DBWT|DMETH_REC,data=dt)
dt$DBWT|DMETH_REC
~DBWT|DMETH_REC
~DBWT|DMETH_REC,data=dt
# type = "count" will give you a frequency
histogram(~DBWT|DMETH_REC,data=dt,type="count")
# type = "count" will give you a frequency
histogram(~DBWT|DMETH_REC,data=dt,type="count")
# birthday weight. column ,followed by the data, 1 column 5 rows layout
histogram(~DBWT|DPLURAL,data=dt,layout=c(1,5),col="black",type="count") # same plot as ch.2 in book
# type = "count" will give you a frequency
histogram(~DBWT|DMETH_REC,data=dt,type="count")
# type = "count" will give you a frequency
histogram(~DBWT|DMETH_REC,data=dt)
# type = "count" will give you a frequency
histogram(~DBWT|DMETH_REC,data=dt,layout=c(1,3))
# type = "count" will give you a frequency
histogram(~DBWT|DMETH_REC,data=dt,layout=c(3,1))
# type = "count" will give you a frequency
histogram(~DBWT|DMETH_REC,data=dt,layout=c(3,1),type="count")
?hist
?plot
?plot
# density plot
densityplot(dt$DBWT,col="blue")
?data
?data
class(dt)
read.csv()
?read.csv
densityplot(~DBWT|DPLURAL,data=dt,layout=c(1,5),plot.point=F,col="red") # may take some time to run
# can either use different subplots or can use different colors to represent categories
densityplot(~DBWT,groups=DPLURAL,data=dt,plot.point=F)
?plot
# scatter plot
plot(dt$DBWT,dt$ESTGEST,type="p")
# scatter plot
plot(dt$DBWT[1:100],dt$ESTGEST,type="p")
# scatter plot
plot(dt$DBWT[1:100],dt$ESTGEST[1:100],type="p")
help("births2006.smpl")
plot(dt$DBWT[1:100],dt$ESTGEST[1:100],type="p",type="b",pch=16,lty=1)
plot(dt$DBWT[1:100],dt$ESTGEST[1:100],type="b",pch=16,lty=1)
xyplot(DBWT~DOB_WK|DPLRUAL,data=dt,layout=c(1,5,col="black"))
xyplot(DBWT~DOB_WK|DPLURAL,data=dt,layout=c(1,5,col="black"))
xyplot(DBWT~DOB_WK|DPLURAL,data=dt,layout=c(1,5),col="black")
# alternative scatter plot style
smoothScatter(dt$WTGAIN,dt$DBWT)
# alternative scatter plot style
smoothScatter(dt$WTGAIN,dt$DBWT,nrpoints = 200)
# alternative scatter plot style
smoothScatter(dt$WTGAIN,dt$DBWT,nrpoints = 200,col="red")
LETTERS[1]
letters[3]
?find
match(c("b","u"),letters)
?match
for(i in "ABC"){
print(i)
}
for(i in "RUTGERS"){
match(c(i),LETTERS)
}
print(match(c(i),LETTERS))
for(i in "RUTGERS"){
print(i)
print(match(c(i),LETTERS))
}
for(i in "R U T G E R S"){
print(i)
print(match(c(i),LETTERS))
}
for(i in strsplit("RUTGERS")){
print(match(c(i),LETTERS))
}
for(i in strsplit("RUTGERS","")){
print(match(c(i),LETTERS))
}
?strsplit
strsplit
codetools::walkCode()
arima(x)
as.character(4)
as.integer("34")
?predict
clear
c
data(iris)
print(data(iris))
iris
plot(iris)
dow
dow_dm
births2006.smpl
iris
rm
r?rm
?rm
?ls
ls()
stop()
data.frame(test=c(1,2,3),bananas=c(3,4,5))
data.frame(test=c(1,4343,3),bananas=c(3,4,5))
# random samples from normal distribution
# args: how many you want to choose
# randomly choose numbers from the normal distribution
rnorm(10)
# random samples from normal distribution
# args: how many you want to choose
# randomly choose numbers from the normal distribution
rnorm(10)
# random samples from normal distribution
# args: how many you want to choose
# randomly choose numbers from the normal distribution
rnorm(10)
# random samples from normal distribution
# args: how many you want to choose
# randomly choose numbers from the normal distribution
rnorm(10)
plot(x)
# random samples from normal distribution
# args: how many you want to choose
# randomly choose numbers from the normal distribution
x <- rnorm(10)
plot(x)
# random samples from normal distribution
# args: how many you want to choose
# randomly choose numbers from the normal distribution
x <- rnorm(100)
plot(x)
# random samples from normal distribution
# args: how many you want to choose
# randomly choose numbers from the normal distribution
x <- rnorm(1000)
plot(x)
clear
help("rm")
help(rm)
-0.5*(log(0.5))
log(2)
log(2)
log(2)
log(2)
log(1/2)
log10(10)
log(2)
log2(2)
log2
-0.5*log2(0.5)
log2(0.5)
*-0.5
-1*-0.5
log2(0)
log2(0)
log2(0)
log10(10)
log2(1)
log(1)
log2(1)
log2(6/8)
log(0.75)
6/8
log2(0.74)
log2(0.75)
log2(2/8)
-6/8(-0.415)
-6/8*(-0.415)
-2/8(-2)
-2/8(-2)
(-2/8)*(-2)
log2(6/8)
log2(2/8)
-6/8*(-0.415)
(-2/8*(-2))
log2(2/8)
-2*-2/8
log2(6/8)
-0.415*(-6/8)
log2(4/12)
(4/12)*-1.584963
(8/12)*log2(8/12)
0.528321+0.389975
summary(fit)
summary
(8/20)*0.81125
(12/20)*0.81125
0.48675+0.3245
(12/20)*0.918
0.5508+0.3245
1/4*log2(1/4)
3/4*log2(3/4)
-18(2/8)
-1*(2/8)
log2(2/8)
(6/8)*log2(6/8)
-2/8*-2
+0.3112781
0.5+0.3112781
log2(7/8)
log2(1/8)
-7/8*-0.19264
0.16856+(3/8)
4/20*(0.81128)
8/20*(0.54356)
8/20(0.81125)
8/20*(0.81125)
0.3245+0.217424+0.162256
1-0.8753
14/15
help()
??
?
clear
\n
stop()
stop
citation()
citation
citation
citation()
stop
stop()
l
L
1L
1L
1L + 2
1L + 2.1
class(1L)
class(1)
class(1.0)
class(1L)
class(x)
x
o
a
clear
stop()
stop("hi")
warning()
warnings()
warning("Hi")
?hclust
dist
plot()
pot
plot
plot
d <- dist()
d <- dist(c(1,2,3))
d
as.dist
?as.dist
sim_vec_str <- "1.00 0.10 0.41 0.55 0.35 0.10 1.00 0.64 0.47 0.98 0.41 0.64 1.00 0.44 0.85 0.55 0.47 0.44 1.00 0.76 0.35 0.98 0.85 0.76 1.00"
class(sim_vec_str)
sim_vec <- strsplit(sim_vec_str,' ')
sim_vec
sim_vec
sim_vec <- as.numeric(sim_vec)
?as.vector
sim_vec <- as.numeric(as.vector((sim_vec)))
?as.vector(sim_vec)
as.vector(sim_vec)
sim_list <- strsplit(sim_vec_str,' ')
sim_vec <- as.numeric(unlist(sim_list))
sim_vec
dissim_vec <- sapply(sim_vec,convert)
convert <- function(x){
return(1.0-x)
}
dissim_vec <- sapply(sim_vec,convert)
dissim_vec
d <- as.dist(matrix(dissim_vec,nrow=5))
d
hc <- hclust(d, method = "max")
?hclust
hc <- hclust(d, method = "complete")
plot(hc)
hc <- hclust(d, method = "single")
hc <- hclust(d, method = "single")
plot(hc)
hc <- hclust(d, method = "complete")
plot(hc)
warning()
warning();
ls
plot
UseMethod
?UseMethod
NULL
F
T
t
t()
?t
UseMethod()
.Primitive
?.Primitive
?Fortran
>?.Fortran
>?.Fortran
>?.Fortran()
.Fortran
.Fortran()
data()
df
df()
?d
?df
d
d
run
?invisible
1:10
x in
1:20
-1:10
::1
:1
-90:1
-900:900
?elton
# variable selection
m3 <- regsubsets(HVAL150 ~ . ,data=oj_tr1,method = "forward")
str2lang()
?str2lang
?do.call
.Internal()
.Internal
str2lang
str2expression()
str2expression
ls
grep
?grep
cd
changedFiles
structure
?structure
structure(m1)
source('~/Documents/Fall-2021/datamining/spotify-project/multiple-linear-regression.R')
structure(m1)
m1
structure
any
spotify_test_df <-
subset(spotify_test_df,
select = -c(Title, Artist, Year, Popularity, TopGenre))
pred1 <- predict(m1, newdata = spotify_test_df, type = "response")
plot(pred1)
?predict
predict
ls
all.names
table(pred1)
pred1
pred1$
pred1 <- predict.lm(m1, newdata = spotify_test_df, type = "response")
pred1
class(lm])
class(lm)
class(pred1)
typeof(pred1)
class(pred1)
class(m1)
?table
?matrix
cbind
?cbind
spotify_table_preds <- cbind(spotify_test_df,pred1)
spotify_table_preds
spotify_tr_df_valence
system
system("ls",intern = T)
system("git diff")
mape <- ((1/nrow(spotify_test_df))*(abs((spotify_test_df$Valence - pred1)/spotify_test_df$Valence))) * 100
print(mape)
length(mape)
mean(mape)
library(MLmetrics)
MAPE(spotify_table_preds$pred1,spotify_table_preds$Valence)
spotify_table_preds$pred1
return
return()
returnValue()
returnValue
?returnValue
mymape <- function(y_pred,y_true){
mean((abs(y_true - y_pred))/y_true)
}
print(mymape(spotify_table_preds$pred1,spotify_table_preds$Valence))
mymape <- function(y_pred,y_true){
return(mean((abs(y_true - y_pred))/y_true) * 100)
}
print(mymape(spotify_table_preds$pred1,spotify_table_preds$Valence))
print(MAPE(spotify_table_preds$pred1,spotify_table_preds$Valence))
print(MAPE(spotify_table_preds$pred1,spotify_table_preds$Valence))
?MAPE
data(cars)
reg <- lm(log(dist) ~ log(speed), data = cars)
MAPE(y_pred = exp(reg$fitted.values), y_true = cars$dist)
str(m1)
